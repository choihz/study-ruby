# 해시(연관 배열, 맵, 사전이라고도 불린다)는 객체 참조가 색인된 컬렉션이라는 점에서 배열과 비슷하다. 하지만 배열은 정수를 인덱스로 사용하는 반면에, 해시의 인덱스로는 심벌, 문자열, 정규 표현식, 심지어는 어떤 객체라도 사용할 수 있다. 따라서 해시에 하나의 값을 저장하고자 할 때 두 개의 객체가 필요하다. 하나는 인덱스로 흔히 키라고 불리는 것이고, 나머지 하나는 이 키에 대응하는 값 객체다. 값을 저장했을 때 사용한 키를 해시의 인덱스로 지정해 해당하는 값을 다시 불러올 수 있다.
# 다음 예제에서는 해시 리터럴을 사용한다. 해시 리터럴은 중괄호 사이에 키와 값을 쌍으로 입력해 사용할 수 있다.

h = { 'dog' => 'canine', 'cat' => 'feline', 'donkey' => 'asinine' }

h.length # => 3
puts h['dog'] # => "canine"
puts h['cow'] # => nil
puts h['cat'] # => "feline"

# 앞선 예제에서는 해시의 키로 문자열을 사용했다. 또한 키와 값을 구분하기 위해 =>를 사용했다. 루비 1.9부터는 키가 심벌일 때 한해서 새로운 축약 표현을 사용할 수 있다. 다음 예제는 키를 심벌로 사용하고, 키와 값을 구분하기 위해 =>를 사용한 예다.

s = { :dog => 'canine', :cat => 'feline', :donkey => 'asinine' }

# 위와 같이 키가 심벌일 경우에 한해 심벌 앞의 콜론(:)을 지우고 =>를 콜론(:)으로 대체해 다음과 같이 사용할 수 있다.

a = { dog: 'canine', cat: 'feline', donkey: 'asinine' }

# 배열과 비교해 볼 때 해시는 큰 장점이 하나 있다. 인덱스로 어떤 객체라도 사용할 수 있다는 점이다. 한 가지 더 놀라운 사실이 있다. 루비는 해시에 요소를 추가한 순서를 기억한다. 따라서 해시를 반복할 때 루비는 요소를 추가한 순서대로 반복한다.

# 이 절을 정리하는 의미에서 특정 텍스트에서 단어의 출현 빈도를 세는 프로그램을 작성해 보자.
# 문제를 두 부분으로 나누어 생각해 볼 수 있다. 먼저 텍스트가 문자열로 주어졌을 때 이를 단어 리스트로 분할할 필요가 있다. 이는 마치 배열처럼 들린다.
# 그리고 고유한 단어들이 몇 번 등장했는지 세어야 한다. 여기에는 해시가 어울릴 것 같다. 단어를 인덱스로 사용하고 대응하는 출현 빈도를 기록한다.

# word_freq/words_from_string.rb
