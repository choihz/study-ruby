# 모듈은 메서드와 클래스, 상수를 함께 하나로 묶는 수단이다. 모듈은 다음과 같은 두 가지 장점이 있다.
# - 모듈은 이름 공간(namespace)을 제공해서 이름이 충돌하는 것을 막아준다.
# - 모듈은 믹스인(mixin) 기능을 구현하는 데 사용한다.

# 루비로 점점 더 큰 프로그램들을 작성하기 시작하면, 아마 자연스럽게 재사용 가능한 코드들의 묶음 즉, 범용적으로 사용할 수 있는 루틴들의 라이브러리를 만들게 될 것이다. 그리고 이 코드들을 별도 파일로 분리하여, 다른 루비 프로그램에서도 함께 사용하기를 원하게 될 것이다.
# 이러한 코드들은 보통 클래스로 이루어지기 때문에, 각 클래스(또는 연관된 클래스와 함께)를 파일에 나눠 담을 것이다. 하지만 클래스 형태를 지니지 않는 코드들을 함께 묶어줘야 하는 경우도 있다.
# 맨 먼저 시도해 볼 수 있는 방법은 이 루틴들을 하나의 파일에 담고, 필요한 프로그램에서 간단한 방법으로 읽어 들여 사용하는 것이다. 이것은 C언어가 동작하는 방식과 같다. 하지만 이 방법에는 문제가 있다. 예를 들어 내가 sin, cos 같은 삼각 함수를 작성했다고 하자. 그리고 후손들의 즐거움을 위해 이것을 trig.rb라는 파일에 전부 집어넣었다.
# 한편 샐리는 선과 악에 대한 시뮬레이션을 만들고 있는데, 그녀가 작성한 쓸모 있는 루틴을 moral.rb 파일에 담았다. 거기에는 be_good과 sin이라는 함수가 있다. 그러던 중에 조(Joe)는 바늘 끝에서 얼마나 많은 천사가 춤을 출 수 있는지 알아내는 프로그램을 원하게 되었다. 조의 프로그램은 trig.rb와 moral.rb를 모두 필요로 한다. 하지만 두 파일 모두 sin 메서드를 정의하고 있다.
# 이에 대한 해답은 모듈 구조를 사용하는 것이다. 모듈은 이름 공간을 정의하는데, 이것은 다른 메서드나 상수에 의해 방해 받을 염려 없이 메서드와 상수를 정의할 수 있는 일종의 샌드박스(sandbox)다. 삼각 함수를 하나의 모듈에 넣으면 되겠다.

# tut_modules/trig.rb
# tut_modules/moral.rb

# 모듈 상수의 이름은 클래스 상수처럼 첫 문자를 대문자로 한다. 메서드 선언 또한 비슷하다. 모듈 메서드는 클래스 메서드처럼 정의한다.
# 다른 프로그램에서 이 모듈을 사용하고자 한다면, 단순히 두 개의 파일을 불러와서(루비에서는 require를 사용한다) 적절한 이름으로 참조하면 된다. 두 모듈에 정의된 상수나 메서드의 이름을 모호하지 않게 참조하기 위해 사용하고자 하는 메서드가 정의된 모듈의 이름을 먼저 적고 ::(범위 한정 연산자)나 마침표(.) 뒤에 이름을 적는다.

# tut_modules/pin_head.rb

# 클래스 메서드처럼 모듈의 이름과 점을 메서드 이름 앞에 붙여서 모듈 메서드를 호출한다. 그리고 상수는 모듈의 이름과 두 개의 콜론을 이용하여 접근한다.
