# 상속과 믹스인은 둘 다 코드를 한 곳에 모아놓고 그 코드를 다른 클래스들에서 효과적으로 재사용할 수 있게 해 준다. 언제 상속을 사용하고, 언제 믹스인을 사용하면 좋을까?
# 디자인에 관한 대부분의 질문에 대한 답이 그렇듯이 그건 상황에 달려 있다. 하지만 오랜 시간에 걸친 경험을 기반으로 프로그래머들은 상속과 믹스인을 선택하는 데 대한 일반적인 가이드라인을 제시하고 있다.

# 먼저 서브클래스화를 살펴보자. 루비에서 클래스는 타입이라는 개념과 연관이 있다. "cat"은 문자열이고 [1, 2]는 배열이라고 이야기하는 것은 자연스럽지만, 좀 더 엄밀하게 말하면 "cat"의 클래스는 String이고, [1, 2]의 클래스는 Array라고 말할 수 있다. 새로운 클래스를 추가하는 것은 그 언어에 새로운 타입을 추가하는 것이라고 봐도 무방하다. 또한 내장 클래스나 직접 만든 클래스를 서브 클래스화하는 것도 새로운 하위 타입을 만드는 것과 같다.
# 타입 추론에 대한 많은 연구가 진행되어 왔다. 유명한 연구 결과 중 하나로 리스코프 치환 원칙이 있다. 이 원칙은 "타입 T의 객체 x에 관해 참이 되는 속성을 q(x)라고 하자. 이때 S가 T에서 파생된 타입이라면 타입 S의 객체 y에 대해 q(y)도 참이 된다"로 정식화된다. 다르게 말하자면 부모 클래스의 객체는 자식 클래스의 객체로 바꿔서 사용할 수 있어야 한다는 의미다. 즉, 자식 클래스는 반드시 부모 클래스의 규약을 따라야만 한다. 이를 다르게 해석하면, 자식 클래스는 한 종류의 부모 클래스라고 말해질 수 있어야 한다(is-a). 이를 자연어로 풀어 써 보면 "자동차는 운송 수단이다", "고양이는 동물이다" 같이 표현된다. 이 말은 고양이라면 적어도 우리가 동물이 할 수 있다고 이야기하는 모든 것이 가능해야 한다는 이야기다.

# 따라서 애플리케이션을 설계할 때 자식 클래스로 만들어야 하는 부분을 찾고자 할 때는 이러한 is-a 관계를 확인하는 것이 좋다.
# 현실에서는 오히려 대상들 사이에 포함하거나 사용하는 관계에 있는 경우가 훨씬 더 일반적이다. 현실 세계는 다양한 조합으로 구성되며 엄밀한 계층 관계로 구성되지 않는다.

# 상속은 두 구성 요소 간에 지나치게 강한 결합을 만들어 낸다. 부모 클래스가 변경되면 자식 클래스에 문제가 생길 가능성이 있다. 더욱 나쁜 것은 자식 클래스를 사용하는 코드가 부모 클래스에서 정의된 메서드를 사용하고 있다면 이러한 코드들에도 문제가 생길 것이다. 부모 클래스의 구현은 자식 클래스에서 사용되고 이는 다시 코드 전체에서 사용된다. 좀 더 규모 있는 프로그램을 상상해 보자. 이러한 이유로 코드를 변경하는 것은 더욱 어려워질 것이다.

# 바로 이러한 이유에서 상속을 통한 디자인에서 멀어질 필요가 있다. 그 대신 A와 B가 A uses a B 또는 A has B 관계를 가진다고 보이면 구성(composition)을 사용하는 것이 좋다. 더 이상 Person은 DataWrapper의 자식 클래스여서는 안 된다. 이를 자식 클래스로 만드는 대신 DataWrapper에 대한 참조를 만들고 그 객체를 사용해 자신을 저장하거나 다시 읽어올 수 있도록 해야 한다.
# 하지만 이 역시 코드를 복잡하게 만들 수 있다. 여기서 믹스인과 메타프로그래밍이 등장한다. 이를 사용하면 다음과 같이 코드를 작성할 수 있다.

class Person
  include Persistable
  # ...
end

# 더 이상 다음과 같이 작성하지 않아도 된다.

class Person < DataWrapper
  # ...
end

# 아직 객체 지향에 익숙하지 않다면 이러한 논의가 잘 와 닿지 않고 추상적으로 느껴질 것이다. 하지만 점점 더 큰 프로그램을 만들게 된다면, 이 문제에 대해 더 생각해 보기를 바란다. 상속은 정말로 상속이 필요한 데서만 사용하자. 그리고 좀 더 유연하고 구성 요소 간의 결합을 줄여주는 방법인 믹스인에 대해 더 탐색해 보자.
